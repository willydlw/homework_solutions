COMP 4300 - Assignment 2 Program Specification

Game Name - Geometry Wars


----------------------
Player
----------------------

- The player is represented by a shape which is defined in the config file
- The player must spawn in the center of the screen at the beginning of the
  game, and after it dies (collides with an enemy)
- The player moves by a speed read from the config file in these directions:
   Up: W key, Left: A key, Down: S key, Right: D key
- The player is confined to move only within the bounds of the window
- The player will shoot a bullet toward the mouse pointer when the left mouse
  button is clicked. The speed, size, and lifespan of the bullets are read 
  from the config file.


----------------------
Special Ability
----------------------

- You are free to come up with your own 'special move' which is fired by 
  the player when the right mouse button is clicked. The special ability must
  - Multiple entities (bullets etc) spawned by special weapon
  - Entities have some unique graphic associated with them
  - A unique game mechanic is introduced via a new component
  - A 'cooldown timer' must be implemented for the special weapon
  The properties of the special move are not in the config file.
  (Will be added as a new component class)

----------------------
Enemy(s):
----------------------

- Enemies will spawn in a random location on the screen every X frames,
  where X is defined in the configuration file.
- Enemies must not overlap the sides of the screen at the time of spawn.

   x = random(0 + radius, width - radius)
   y = random(0 + radius, height - radius)

- Enemies shapes have random number of vertices, between a given minimum and
  maximum number, which is also specified in the config file.
- Enemy shape radius will be specified in the config file.
- Enemies will be given a random color upon spawning
- Enemies will be given a random speed upon spawning, between a minimum and 
  maximum value specified in the config file.
- When an enemy reaches the edge of the window, it should bounce off in 
  the opposite direction.
- When (large) enemies collide with a bullet or player, they are destroyed,
  and N small enemies spawn in its place. N is the number of vertices
  of the original enemy. Each small enemy must have the same number of 
  vertices and color of the original enemy. These small entities travel
  outward at angles at fixed intervals equal to (360 / vertices).
  For example, if the orgiinal enemy had 6 sides, the 6 smaller entities
  will travel outwards in intervals of (360/6) = 60 degrees. The smaller enemies
  must have a radius equal to half of the orginal entity.
  - Spawn smaller shape in center of original. 
  - Calculate the velocity vector x,y speeds based on the angles.
  - Example: hexagon splits into 6 smaller enities. Angles will be 0, 60, 120, 180,
    240, 300 degrees.


----------------------
Score
----------------------

- Each time an enemy spawns, it is given a score component of N*100, where N
  is the number of vertices it has. Small enemies get double this value.
- If a player bullet kills an enemy, the game score is increased by the soce
  component of the enemy killed.
- The score should be displayed with the font specified by the config file in 
  the top-left corner of the screen.


----------------------
Drawing
----------------------

- In the render system, all entities should be given a slow rotation, which
  makes the game look a little nicer.

- Any special effects which do not alter game play can be added for up to 
  5% bonus marks on the assignment. Note that assignments cannot go above
  100% total makes, the but the 5% bonus can overwrite any marks lost in other
  areas of the assignment.

- Any entity with a lifespan is currently alive, it should have its Color
  alpha channel set to a ratio depending on how long it has left to live.
  For example, if an Entity has a 100 frame life span, and it has been alive for
  50 frames, its alpha value should be set to 0.5 * 255. The alpha should go from
  255 when it is first spawned, to 0 on the last frame it is alive.

----------------------
Miscellaneous
----------------------
- The 'P' key should pause the game
- The escape key should close the game


----------------------
Configuration File
----------------------

The configuration file will have one line each specifying the window size,
font format, player, bullet specification, and enemy specifications.
Lines will be given in that order, with the following syntax:

Window W H FL FS
- This line declares that the SFML window must be constructed with with W
  and height H, each of which will be integers. Fl is the frame limit that the
  window should be set to, and FS will be an integer which specifies whether to
  display the application in full-screen mode (1) or not (0).

  W   width                int 
  H   height               int
  FL  frame limit          int
  FS  full screen mode     int    1 - yes, 0-no


Font F S R G B
- This line defines the font which is to be used to draw text
  for this program. The forate of the line is as follows:
  font file    F            std::string (it will have no spaces)
  font size    S            int 
  font color   R,G,B        int, int, int
  

Player Specification

Player SR CR S FR FG FB OR OG OB OT V
   Shape radius         SR             int
   Collision radius     CR             int
   Speed (pixels per frame, magnitude)
                        S              float 
   Fill color           FR, FG, FB     int, int, int
   Outline color        OR, OG, OB     int, int, int 
   Outline thickness    OT             int 
   Shape vertices       V              int


Enemy Specification

Enemy SR CR SMIN SMAX OR OG OB OT VMIN VMAX L SI

   Shape Radius         SR             int 
   Collision radius     CR             int 
   Min/max speed        SMIN, SMAX     float, float 
   Outline Color        OR, OG, OB     int, int, int
   Outline thickness    OT             int 
   Min/max vertices     VMIN, VMAX     int, int 
   Small lifespan       L              int 
   Spawn Interval       SI             int


Bullet Specification

Bullet SR CR S FR FG FB OR OG OB OT V L

   Shape radius         SR             int
   Collision radius     CR             int
   Speed                S              float 
   fill color           FR, FG, FB     int, int, int
   outline color        OR, OG, OB     int, int, int 
   outline thickness    OT             int
   Shape vertices       V              int 
   Lifespan             L              int


----------------------
Assignment Hints
----------------------

Implement and test. Implement and Test! Do not go to the next step until the
current step is working.

Recommend approaching this assignment in the following order:
0. Save the configuration file reading until later, after Entities implemented
1. Implement the Vec2 class, which you will use for all components.
2. Implement the basic functionality in the Entity Manager Class
   Implement the EntityManager's addEntity() and update() functions so
   you can start testing the Game class quickly. Don't worry about the update()
   function which deletes dead entities until later when you get more game 
   mechanics working.
3. Implement basics of the game class:
   a. Construct a player Entity using the spawnPlayer() function.
   b. Implement basic drawing of entities using the Game::sRender() function.
   c. Construct some enemies using the spawnEnemy() function
   d. Construct a bullet using the spawnBullet() function
4. Implement Player movement in Game::sUserInput and GAme::sMovement.
5. Implement the EntityManager::Update() function so it deletes dead entities.
6. Implement the EntityManager::getEntities(tag) functionality.
7. Implement collisions in sCollision and entity.destroy() if it's dead
8. Implement the rest of the game's functionality, include config file reading.


----------------------
Geometry Notes
----------------------

Circles:
Set the origin to the center: setOrigin(radius, radius)
Then when we set the position, it will set the position at the center of the object.

Circles are approximated with multi-sided polygons
drawCircle(pos, radius, sides)

SFML function setPointCount sets number of sides

The CircleShape class can be used to define polygons by specifying number of sides.

// draw a triangle
sf::CirclShape triangle(80.f, 3);

// define a square
sf::CircleShape square(80.0f, 4);

// define an octagon
sf::CircleShape octagon(80.f, 8);

The above examples are shown in the SFML Shape tutorial: https://www.sfml-dev.org/tutorials/2.5/graphics-shape.php
in the regular polygons section.



Collisions

For this assignment, use a circle shape as the bounding box for collisions.


Bullet firing: 

Fire bullet towards mouse click.
   velocity vector determined by vector from player to mouse x,y coordinates

   We have to calculate the update speed for bullet travel each frame.
   Example: bullet velocity given as 5 (the magnitude of the vector).
   5 is the number of pixels the bullet should travel each frame (the vector magnitude).
   We have to calculate the x,y travel values each frame to update the bullet's position.